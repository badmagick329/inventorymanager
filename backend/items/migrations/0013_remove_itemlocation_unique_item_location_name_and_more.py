# Generated by Django 5.0.1 on 2024-02-09 17:42

import django.db.models.functions.text
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("items", "0012_remove_order_positive_order_price_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RemoveConstraint(
            model_name="itemlocation",
            name="unique_item_location_name",
        ),
        migrations.RemoveConstraint(
            model_name="itemlocation",
            name="non_empty_item_location_name",
        ),
        migrations.RemoveConstraint(
            model_name="order",
            name="non_empty_order_name",
        ),
        migrations.RemoveConstraint(
            model_name="order",
            name="positive_order_quantity",
        ),
        migrations.RemoveConstraint(
            model_name="order",
            name="positive_order_current_sale_price",
        ),
        migrations.RemoveConstraint(
            model_name="order",
            name="positive_order_price",
        ),
        migrations.RemoveConstraint(
            model_name="sale",
            name="positive_sale_quantity",
        ),
        migrations.RemoveConstraint(
            model_name="sale",
            name="positive_sale_debt",
        ),
        migrations.RemoveConstraint(
            model_name="sale",
            name="positive_sale_price",
        ),
        migrations.AddConstraint(
            model_name="itemlocation",
            constraint=models.UniqueConstraint(
                django.db.models.functions.text.Lower("name"),
                name="unique_item_location_name",
                violation_error_message="Name must be unique.",
            ),
        ),
        migrations.AddConstraint(
            model_name="itemlocation",
            constraint=models.CheckConstraint(
                check=models.Q(("name", ""), _negated=True),
                name="non_empty_item_location_name",
                violation_error_message="Name cannot be empty.",
            ),
        ),
        migrations.AddConstraint(
            model_name="order",
            constraint=models.CheckConstraint(
                check=models.Q(("name", ""), _negated=True),
                name="non_empty_order_name",
                violation_error_message="Name cannot be empty.",
            ),
        ),
        migrations.AddConstraint(
            model_name="order",
            constraint=models.CheckConstraint(
                check=models.Q(("price_per_item__gt", 0)),
                name="positive_order_price",
                violation_error_message="Price must be greater than 0.",
            ),
        ),
        migrations.AddConstraint(
            model_name="order",
            constraint=models.CheckConstraint(
                check=models.Q(("quantity__gt", 0)),
                name="positive_order_quantity",
                violation_error_message="Quantity must be greater than 0.",
            ),
        ),
        migrations.AddConstraint(
            model_name="order",
            constraint=models.CheckConstraint(
                check=models.Q(("current_sale_price__gt", 0)),
                name="positive_order_current_sale_price",
                violation_error_message="Current sale price must be greater than 0.",
            ),
        ),
        migrations.AddConstraint(
            model_name="sale",
            constraint=models.CheckConstraint(
                check=models.Q(("quantity__gt", 0)),
                name="positive_sale_quantity",
                violation_error_message="Quantity must be greater than 0.",
            ),
        ),
        migrations.AddConstraint(
            model_name="sale",
            constraint=models.CheckConstraint(
                check=models.Q(("price_per_item__gt", 0)),
                name="positive_sale_price",
                violation_error_message="Price must be greater than 0.",
            ),
        ),
        migrations.AddConstraint(
            model_name="sale",
            constraint=models.CheckConstraint(
                check=models.Q(("debt__gte", 0)),
                name="positive_sale_debt",
                violation_error_message="Debt cannot be negative.",
            ),
        ),
    ]
